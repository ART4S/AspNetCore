//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QueryFiltering.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class QueryFilteringParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, OR=11, AND=12, NOT=13, EQUALS=14, NOTEQUALS=15, GREATERTHAN=16, 
		GREATERTHANOREQUAL=17, LESSTHAN=18, LESSTHANOREQUAL=19, INT=20, LONG=21, 
		DOUBLE=22, FLOAT=23, DECIMAL=24, BOOL=25, GUID=26, NULL=27, WHITESPACE=28, 
		PROPERTYACCESS=29, STRING=30, CHAR=31;
	public const int
		RULE_query = 0, RULE_queryParameter = 1, RULE_top = 2, RULE_skip = 3, 
		RULE_orderBy = 4, RULE_orderByExpression = 5, RULE_filter = 6, RULE_filterExpression = 7, 
		RULE_atom = 8, RULE_boolExpression = 9, RULE_property = 10, RULE_constant = 11;
	public static readonly string[] ruleNames = {
		"query", "queryParameter", "top", "skip", "orderBy", "orderByExpression", 
		"filter", "filterExpression", "atom", "boolExpression", "property", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'&'", "'$top='", "'$skip='", "'$orderBy='", "'ask'", "'desc'", 
		"','", "'$filter='", "'('", "')'", "'or'", "'and'", "'not'", "'eq'", "'ne'", 
		"'gt'", "'ge'", "'lt'", "'le'", null, null, null, null, null, null, null, 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "OR", 
		"AND", "NOT", "EQUALS", "NOTEQUALS", "GREATERTHAN", "GREATERTHANOREQUAL", 
		"LESSTHAN", "LESSTHANOREQUAL", "INT", "LONG", "DOUBLE", "FLOAT", "DECIMAL", 
		"BOOL", "GUID", "NULL", "WHITESPACE", "PROPERTYACCESS", "STRING", "CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryFiltering.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryFilteringParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryFilteringParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryFilteringParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public QueryParameterContext[] queryParameter() {
			return GetRuleContexts<QueryParameterContext>();
		}
		public QueryParameterContext queryParameter(int i) {
			return GetRuleContext<QueryParameterContext>(i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__7))) != 0)) {
				{
				State = 24; queryParameter();
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 25; Match(T__0);
					State = 26; queryParameter();
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryParameterContext : ParserRuleContext {
		public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public OrderByContext orderBy() {
			return GetRuleContext<OrderByContext>(0);
		}
		public QueryParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryParameterContext queryParameter() {
		QueryParameterContext _localctx = new QueryParameterContext(Context, State);
		EnterRule(_localctx, 2, RULE_queryParameter);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; top();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; skip();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; filter();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37; orderBy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 4, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__1);
			State = 41; _localctx.count = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 6, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(T__2);
			State = 44; _localctx.count = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByContext : ParserRuleContext {
		public OrderByExpressionContext expression;
		public OrderByExpressionContext orderByExpression() {
			return GetRuleContext<OrderByExpressionContext>(0);
		}
		public OrderByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderBy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByContext orderBy() {
		OrderByContext _localctx = new OrderByContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__3);
			State = 47; _localctx.expression = orderByExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; property();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==T__5) {
				{
				State = 50;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 53; Match(T__6);
				State = 54; property();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4 || _la==T__5) {
					{
					State = 55;
					_la = TokenStream.LA(1);
					if ( !(_la==T__4 || _la==T__5) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public FilterExpressionContext expression;
		public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 12, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(T__7);
			State = 64; _localctx.expression = filterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExpressionContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(QueryFilteringParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(QueryFilteringParser.OR, i);
		}
		public ITerminalNode[] AND() { return GetTokens(QueryFilteringParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(QueryFilteringParser.AND, i);
		}
		public FilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExpressionContext filterExpression() {
		FilterExpressionContext _localctx = new FilterExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_filterExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; atom();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				State = 67;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 68; atom();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public IToken not;
		public BoolExpressionContext boolExpr;
		public FilterExpressionContext filterExpr;
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryFilteringParser.NOT, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 74; _localctx.not = Match(NOT);
				}
			}

			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROPERTYACCESS:
				{
				State = 77; _localctx.boolExpr = boolExpression();
				}
				break;
			case T__8:
				{
				State = 78; Match(T__8);
				State = 79; _localctx.filterExpr = filterExpression();
				State = 80; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public PropertyContext left;
		public IToken operation;
		public ConstantContext right;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(QueryFilteringParser.EQUALS, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(QueryFilteringParser.NOTEQUALS, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(QueryFilteringParser.GREATERTHAN, 0); }
		public ITerminalNode GREATERTHANOREQUAL() { return GetToken(QueryFilteringParser.GREATERTHANOREQUAL, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(QueryFilteringParser.LESSTHAN, 0); }
		public ITerminalNode LESSTHANOREQUAL() { return GetToken(QueryFilteringParser.LESSTHANOREQUAL, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx.left = property();
			State = 85;
			_localctx.operation = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOTEQUALS) | (1L << GREATERTHAN) | (1L << GREATERTHANOREQUAL) | (1L << LESSTHAN) | (1L << LESSTHANOREQUAL))) != 0)) ) {
				_localctx.operation = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 86; _localctx.right = constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode PROPERTYACCESS() { return GetToken(QueryFilteringParser.PROPERTYACCESS, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; _localctx.value = Match(PROPERTYACCESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(QueryFilteringParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(QueryFilteringParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(QueryFilteringParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(QueryFilteringParser.DECIMAL, 0); }
		public ITerminalNode BOOL() { return GetToken(QueryFilteringParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(QueryFilteringParser.NULL, 0); }
		public ITerminalNode GUID() { return GetToken(QueryFilteringParser.GUID, 0); }
		public ITerminalNode STRING() { return GetToken(QueryFilteringParser.STRING, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_localctx.value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << LONG) | (1L << DOUBLE) | (1L << FLOAT) | (1L << DECIMAL) | (1L << BOOL) | (1L << GUID) | (1L << NULL) | (1L << STRING))) != 0)) ) {
				_localctx.value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '_', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'!', '\v', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x36', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', ';', '\n', '\a', '\a', '\a', '=', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '@', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'H', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'K', '\v', '\t', '\x3', '\n', '\x5', '\n', 'N', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'U', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', 
		'\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x2', '\x6', '\x3', '\x2', '\a', '\b', '\x3', 
		'\x2', '\r', '\xE', '\x3', '\x2', '\x10', '\x15', '\x4', '\x2', '\x16', 
		'\x1D', ' ', ' ', '\x2', ']', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', '*', '\x3', '\x2', '\x2', 
		'\x2', '\b', '-', '\x3', '\x2', '\x2', '\x2', '\n', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'M', '\x3', '\x2', '\x2', '\x2', '\x14', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'Z', '\x3', '\x2', '\x2', '\x2', '\x18', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1F', '\x5', '\x4', '\x3', '\x2', '\x1B', '\x1C', 
		'\a', '\x3', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\x4', '\x3', '\x2', 
		'\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', 
		'\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '$', ')', '\x5', '\x6', '\x4', '\x2', '%', ')', '\x5', '\b', 
		'\x5', '\x2', '&', ')', '\x5', '\xE', '\b', '\x2', '\'', ')', '\x5', '\n', 
		'\x6', '\x2', '(', '$', '\x3', '\x2', '\x2', '\x2', '(', '%', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', 
		'\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', '+', 
		'\a', '\x4', '\x2', '\x2', '+', ',', '\a', '\x16', '\x2', '\x2', ',', 
		'\a', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', 
		'.', '/', '\a', '\x16', '\x2', '\x2', '/', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\x6', '\x2', '\x2', '\x31', '\x32', '\x5', 
		'\f', '\a', '\x2', '\x32', '\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', 
		'\x5', '\x16', '\f', '\x2', '\x34', '\x36', '\t', '\x2', '\x2', '\x2', 
		'\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '>', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\a', '\t', '\x2', '\x2', '\x38', ':', '\x5', '\x16', '\f', '\x2', '\x39', 
		';', '\t', '\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\r', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\n', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\x10', '\t', '\x2', '\x43', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'I', '\x5', '\x12', '\n', '\x2', '\x45', '\x46', '\t', '\x3', 
		'\x2', '\x2', '\x46', 'H', '\x5', '\x12', '\n', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 
		'N', '\a', '\xF', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'T', '\x3', '\x2', '\x2', '\x2', 
		'O', 'U', '\x5', '\x14', '\v', '\x2', 'P', 'Q', '\a', '\v', '\x2', '\x2', 
		'Q', 'R', '\x5', '\x10', '\t', '\x2', 'R', 'S', '\a', '\f', '\x2', '\x2', 
		'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'O', '\x3', '\x2', '\x2', '\x2', 
		'T', 'P', '\x3', '\x2', '\x2', '\x2', 'U', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\x5', '\x16', '\f', '\x2', 'W', 'X', '\t', '\x4', '\x2', 
		'\x2', 'X', 'Y', '\x5', '\x18', '\r', '\x2', 'Y', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\x1F', '\x2', '\x2', '[', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\t', '\x5', '\x2', '\x2', ']', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x1F', '\"', '(', '\x35', ':', '>', 
		'I', 'M', 'T',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
