//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QueryFiltering.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class QueryFilteringParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		OR=10, AND=11, NOT=12, EQUALS=13, NOTEQUALS=14, GREATERTHAN=15, GREATERTHANOREQUAL=16, 
		LESSTHAN=17, LESSTHANOREQUAL=18, TOUPPER=19, TOLOWER=20, STARTSWITH=21, 
		ENDSWITH=22, INT=23, LONG=24, DOUBLE=25, FLOAT=26, DECIMAL=27, BOOL=28, 
		GUID=29, NULL=30, DATETIME=31, STRING=32, PROPERTYACCESS=33, WHITESPACE=34, 
		ASC=35, DESC=36;
	public const int
		RULE_query = 0, RULE_queryParameter = 1, RULE_top = 2, RULE_skip = 3, 
		RULE_orderBy = 4, RULE_orderByExpression = 5, RULE_orderByProperty = 6, 
		RULE_filter = 7, RULE_filterExpression = 8, RULE_filterAtom = 9, RULE_boolExpression = 10, 
		RULE_atom = 11, RULE_property = 12, RULE_constant = 13, RULE_function = 14;
	public static readonly string[] ruleNames = {
		"query", "queryParameter", "top", "skip", "orderBy", "orderByExpression", 
		"orderByProperty", "filter", "filterExpression", "filterAtom", "boolExpression", 
		"atom", "property", "constant", "function"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "'&'", "'$top='", "'$skip='", "'$orderBy='", "','", "'$filter='", 
		"'('", "')'", "'or'", "'and'", "'not'", "'eq'", "'ne'", "'gt'", "'ge'", 
		"'lt'", "'le'", "'toupper'", "'tolower'", "'startswith'", "'endswith'", 
		null, null, null, null, null, null, null, "'null'", null, null, null, 
		null, "'asc'", "'desc'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "OR", "AND", 
		"NOT", "EQUALS", "NOTEQUALS", "GREATERTHAN", "GREATERTHANOREQUAL", "LESSTHAN", 
		"LESSTHANOREQUAL", "TOUPPER", "TOLOWER", "STARTSWITH", "ENDSWITH", "INT", 
		"LONG", "DOUBLE", "FLOAT", "DECIMAL", "BOOL", "GUID", "NULL", "DATETIME", 
		"STRING", "PROPERTYACCESS", "WHITESPACE", "ASC", "DESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryFiltering.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryFilteringParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryFilteringParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryFilteringParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public QueryParameterContext[] queryParameter() {
			return GetRuleContexts<QueryParameterContext>();
		}
		public QueryParameterContext queryParameter(int i) {
			return GetRuleContext<QueryParameterContext>(i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6))) != 0)) {
				{
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 30; Match(T__0);
					}
				}

				State = 33; queryParameter();
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 34; Match(T__1);
					State = 35; queryParameter();
					}
					}
					State = 40;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryParameterContext : ParserRuleContext {
		public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public OrderByContext orderBy() {
			return GetRuleContext<OrderByContext>(0);
		}
		public QueryParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryParameterContext queryParameter() {
		QueryParameterContext _localctx = new QueryParameterContext(Context, State);
		EnterRule(_localctx, 2, RULE_queryParameter);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; top();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; skip();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; filter();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; orderBy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 4, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__2);
			State = 50; _localctx.count = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 6, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(T__3);
			State = 53; _localctx.count = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByContext : ParserRuleContext {
		public OrderByExpressionContext expression;
		public OrderByExpressionContext orderByExpression() {
			return GetRuleContext<OrderByExpressionContext>(0);
		}
		public OrderByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderBy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByContext orderBy() {
		OrderByContext _localctx = new OrderByContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(T__4);
			State = 56; _localctx.expression = orderByExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public OrderByPropertyContext[] orderByProperty() {
			return GetRuleContexts<OrderByPropertyContext>();
		}
		public OrderByPropertyContext orderByProperty(int i) {
			return GetRuleContext<OrderByPropertyContext>(i);
		}
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; orderByProperty(true);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 59; Match(T__5);
				State = 60; orderByProperty(false);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByPropertyContext : ParserRuleContext {
		public bool firstSort;
		public IToken value;
		public IToken op;
		public ITerminalNode PROPERTYACCESS() { return GetToken(QueryFilteringParser.PROPERTYACCESS, 0); }
		public ITerminalNode ASC() { return GetToken(QueryFilteringParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(QueryFilteringParser.DESC, 0); }
		public OrderByPropertyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public OrderByPropertyContext(ParserRuleContext parent, int invokingState, bool firstSort)
			: base(parent, invokingState)
		{
			this.firstSort = firstSort;
		}
		public override int RuleIndex { get { return RULE_orderByProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByPropertyContext orderByProperty(bool firstSort) {
		OrderByPropertyContext _localctx = new OrderByPropertyContext(Context, State, firstSort);
		EnterRule(_localctx, 12, RULE_orderByProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; _localctx.value = Match(PROPERTYACCESS);
			State = 67;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public FilterExpressionContext expression;
		public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 14, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__6);
			State = 70; _localctx.expression = filterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExpressionContext : ParserRuleContext {
		public FilterAtomContext[] filterAtom() {
			return GetRuleContexts<FilterAtomContext>();
		}
		public FilterAtomContext filterAtom(int i) {
			return GetRuleContext<FilterAtomContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(QueryFilteringParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(QueryFilteringParser.OR, i);
		}
		public ITerminalNode[] AND() { return GetTokens(QueryFilteringParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(QueryFilteringParser.AND, i);
		}
		public FilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExpressionContext filterExpression() {
		FilterExpressionContext _localctx = new FilterExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_filterExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; filterAtom();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				State = 73;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 74; filterAtom();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterAtomContext : ParserRuleContext {
		public IToken not;
		public BoolExpressionContext boolExpr;
		public FilterExpressionContext filterExpr;
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryFilteringParser.NOT, 0); }
		public FilterAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterAtomContext filterAtom() {
		FilterAtomContext _localctx = new FilterAtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_filterAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 80; _localctx.not = Match(NOT);
				}
			}

			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOUPPER:
			case TOLOWER:
			case STARTSWITH:
			case ENDSWITH:
			case INT:
			case LONG:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case BOOL:
			case GUID:
			case NULL:
			case DATETIME:
			case STRING:
			case PROPERTYACCESS:
				{
				State = 83; _localctx.boolExpr = boolExpression();
				}
				break;
			case T__7:
				{
				State = 84; Match(T__7);
				State = 85; _localctx.filterExpr = filterExpression();
				State = 86; Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public AtomContext left;
		public IToken operation;
		public AtomContext right;
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(QueryFilteringParser.EQUALS, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(QueryFilteringParser.NOTEQUALS, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(QueryFilteringParser.GREATERTHAN, 0); }
		public ITerminalNode GREATERTHANOREQUAL() { return GetToken(QueryFilteringParser.GREATERTHANOREQUAL, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(QueryFilteringParser.LESSTHAN, 0); }
		public ITerminalNode LESSTHANOREQUAL() { return GetToken(QueryFilteringParser.LESSTHANOREQUAL, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; _localctx.left = atom();
			State = 91;
			_localctx.operation = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOTEQUALS) | (1L << GREATERTHAN) | (1L << GREATERTHANOREQUAL) | (1L << LESSTHAN) | (1L << LESSTHANOREQUAL))) != 0)) ) {
				_localctx.operation = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 92; _localctx.right = atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public PropertyContext propertyRule;
		public ConstantContext constantRule;
		public FunctionContext functionRule;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 22, RULE_atom);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROPERTYACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; _localctx.propertyRule = property();
				}
				break;
			case INT:
			case LONG:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case BOOL:
			case GUID:
			case NULL:
			case DATETIME:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; _localctx.constantRule = constant();
				}
				break;
			case TOUPPER:
			case TOLOWER:
			case STARTSWITH:
			case ENDSWITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; _localctx.functionRule = function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode PROPERTYACCESS() { return GetToken(QueryFilteringParser.PROPERTYACCESS, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; _localctx.value = Match(PROPERTYACCESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(QueryFilteringParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(QueryFilteringParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(QueryFilteringParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(QueryFilteringParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(QueryFilteringParser.DECIMAL, 0); }
		public ITerminalNode BOOL() { return GetToken(QueryFilteringParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(QueryFilteringParser.NULL, 0); }
		public ITerminalNode GUID() { return GetToken(QueryFilteringParser.GUID, 0); }
		public ITerminalNode STRING() { return GetToken(QueryFilteringParser.STRING, 0); }
		public ITerminalNode DATETIME() { return GetToken(QueryFilteringParser.DATETIME, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_localctx.value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << LONG) | (1L << DOUBLE) | (1L << FLOAT) | (1L << DECIMAL) | (1L << BOOL) | (1L << GUID) | (1L << NULL) | (1L << DATETIME) | (1L << STRING))) != 0)) ) {
				_localctx.value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken value;
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode TOUPPER() { return GetToken(QueryFilteringParser.TOUPPER, 0); }
		public ITerminalNode TOLOWER() { return GetToken(QueryFilteringParser.TOLOWER, 0); }
		public ITerminalNode STARTSWITH() { return GetToken(QueryFilteringParser.STARTSWITH, 0); }
		public ITerminalNode ENDSWITH() { return GetToken(QueryFilteringParser.ENDSWITH, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryFilteringVisitor<TResult> typedVisitor = visitor as IQueryFilteringVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_localctx.value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOUPPER) | (1L << TOLOWER) | (1L << STARTSWITH) | (1L << ENDSWITH))) != 0)) ) {
				_localctx.value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 104; Match(T__7);
			State = 105; atom();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 106; Match(T__5);
				State = 107; atom();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', 'v', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', '\xE', 
		'\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', '\x2', 
		'\x5', '\x2', '\"', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\'', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '*', '\v', 
		'\x2', '\x5', '\x2', ',', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x32', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '@', '\n', '\a', '\f', '\a', '\xE', '\a', '\x43', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'N', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'Q', '\v', '\n', '\x3', '\v', '\x5', '\v', 
		'T', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '[', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x64', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', 'o', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 'r', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\a', '\x3', '\x2', '%', '&', '\x3', 
		'\x2', '\f', '\r', '\x3', '\x2', '\xF', '\x14', '\x3', '\x2', '\x19', 
		'\"', '\x3', '\x2', '\x15', '\x18', '\x2', 's', '\x2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x31', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x39', '\x3', '\x2', '\x2', '\x2', '\f', '<', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x44', '\x3', '\x2', '\x2', '\x2', '\x10', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'J', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x16', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'g', '\x3', '\x2', '\x2', '\x2', '\x1E', 'i', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\"', '\a', '\x3', '\x2', '\x2', '!', ' ', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\x3', '\x2', '\x2', '\x2', '#', '(', '\x5', '\x4', '\x3', '\x2', '$', 
		'%', '\a', '\x4', '\x2', '\x2', '%', '\'', '\x5', '\x4', '\x3', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x3', '\x2', '\x2', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', 
		'\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '+', '!', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x3', '\x3', '\x2', '\x2', '\x2', '-', '\x32', '\x5', '\x6', 
		'\x4', '\x2', '.', '\x32', '\x5', '\b', '\x5', '\x2', '/', '\x32', '\x5', 
		'\x10', '\t', '\x2', '\x30', '\x32', '\x5', '\n', '\x6', '\x2', '\x31', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x31', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\a', '\x5', '\x2', '\x2', '\x34', '\x35', '\a', '\x19', '\x2', '\x2', 
		'\x35', '\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x6', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\x19', '\x2', '\x2', '\x38', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\a', '\x2', '\x2', ':', 
		';', '\x5', '\f', '\a', '\x2', ';', '\v', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x41', '\x5', '\xE', '\b', '\x2', '=', '>', '\a', '\b', '\x2', '\x2', 
		'>', '@', '\x5', '\xE', '\b', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '#', '\x2', '\x2', '\x45', '\x46', '\t', '\x2', '\x2', '\x2', 
		'\x46', '\xF', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\t', '\x2', 
		'\x2', 'H', 'I', '\x5', '\x12', '\n', '\x2', 'I', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'O', '\x5', '\x14', '\v', '\x2', 'K', 'L', '\t', '\x3', 
		'\x2', '\x2', 'L', 'N', '\x5', '\x14', '\v', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\a', 
		'\xE', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'Z', '\x3', '\x2', '\x2', '\x2', 'U', '[', '\x5', 
		'\x16', '\f', '\x2', 'V', 'W', '\a', '\n', '\x2', '\x2', 'W', 'X', '\x5', 
		'\x12', '\n', '\x2', 'X', 'Y', '\a', '\v', '\x2', '\x2', 'Y', '[', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', 
		'\x2', '\x2', '\x2', '[', '\x15', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x5', '\x18', '\r', '\x2', ']', '^', '\t', '\x4', '\x2', '\x2', '^', 
		'_', '\x5', '\x18', '\r', '\x2', '_', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x64', '\x5', '\x1A', '\xE', '\x2', '\x61', '\x64', '\x5', '\x1C', 
		'\xF', '\x2', '\x62', '\x64', '\x5', '\x1E', '\x10', '\x2', '\x63', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '#', '\x2', '\x2', '\x66', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\t', '\x5', '\x2', '\x2', 'h', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\t', '\x6', '\x2', '\x2', 
		'j', 'k', '\a', '\n', '\x2', '\x2', 'k', 'p', '\x5', '\x18', '\r', '\x2', 
		'l', 'm', '\a', '\b', '\x2', '\x2', 'm', 'o', '\x5', '\x18', '\r', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\a', '\v', '\x2', '\x2', 't', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\f', '!', '(', '+', '\x31', '\x41', 'O', 'S', 'Z', '\x63', 'p',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
